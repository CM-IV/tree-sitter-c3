================================================================================
Module declarations
================================================================================

module program::main;

import std::io;

fn void main() {
    io::printf("Hello, World!\n");
}

--------------------------------------------------------------------------------

(source_file
  (module
    path: (path_ident
      (module_resolution
        (ident))
      (ident)))
  (import_declaration
    path: (path_ident
      (module_resolution
        (ident))
      (ident)))
  (func_definition
    (func_header
      return_type: (type
        (base_type
          (base_type_name)))
      name: (ident))
    (fn_parameter_list)
    body: (macro_func_body
      (compound_stmt
        (expr_stmt
          (call_expr
            function: (module_ident_expr
              (module_resolution
                (ident))
              ident: (ident))
            arguments: (call_invocation
              (call_arg
                (string_literal
                  (string_content)
                  (escape_sequence))))))))))

================================================================================
Import declarations
================================================================================

import std::io;
import std::math;
import std::data::json;

--------------------------------------------------------------------------------

(source_file
  (import_declaration
    (path_ident
      (module_resolution
        (ident))
      (ident)))
  (import_declaration
    (path_ident
      (module_resolution
        (ident))
      (ident)))
  (import_declaration
    (path_ident
      (module_resolution
        (ident))
      (module_resolution
        (ident))
      (ident))))

================================================================================
Alias declarations
================================================================================

alias CharPtr = char*;
alias Numbers = int[10];
typedef Foo = int;
alias bar = foo;
alias bar_var = foo_var;
alias BarFoo = bar::Foo;
alias Bar_foo = bar::Foo{int};
alias FooFloat = foo_test::Foo{float, double};
alias FooFloat2 = Foo{float, double};
alias testFloat = foo_test::test{float, double};
alias Callback = fn int(char* text, int value);
alias PI = std::math::PI;
alias isTest = Test.is_test;
alias isTest2 = bar::Test[].is_test;
alias @isTest = Test.@is_test;
alias @isTest = bar::Test.@is_test;
alias @isTest = bar::Test{int}[].@is_test;
alias GOO = bar::GOO{int};
alias goo = bar::Foo{int}.method;
alias @intHello = foo::@hello{int};

--------------------------------------------------------------------------------

(source_file
  (alias_declaration
    (type_ident)
    (type
      (base_type
        (base_type_name))
      (type_suffix)))
  (alias_declaration
    (type_ident)
    (type
      (base_type
        (base_type_name))
      (type_suffix
        (integer_literal))))
  (typedef_declaration
    (type_ident)
    (type
      (base_type
        (base_type_name))))
  (alias_declaration
    (ident)
    (ident))
  (alias_declaration
    (ident)
    (ident))
  (alias_declaration
    (type_ident)
    (type
      (base_type
        (module_type_ident
          (module_resolution
            (ident))
          (type_ident)))))
  (alias_declaration
    (type_ident)
    (type
      (base_type
        (generic_type_ident
          (module_type_ident
            (module_resolution
              (ident))
            (type_ident))
          (generic_arguments
            (type
              (base_type
                (base_type_name))))))))
  (alias_declaration
    (type_ident)
    (type
      (base_type
        (generic_type_ident
          (module_type_ident
            (module_resolution
              (ident))
            (type_ident))
          (generic_arguments
            (type
              (base_type
                (base_type_name)))
            (type
              (base_type
                (base_type_name))))))))
  (alias_declaration
    (type_ident)
    (type
      (base_type
        (generic_type_ident
          (type_ident)
          (generic_arguments
            (type
              (base_type
                (base_type_name)))
            (type
              (base_type
                (base_type_name))))))))
  (alias_declaration
    (ident)
    (module_resolution
      (ident))
    (ident)
    (generic_arguments
      (type
        (base_type
          (base_type_name)))
      (type
        (base_type
          (base_type_name)))))
  (alias_declaration
    (type_ident)
    (func_signature
      (type
        (base_type
          (base_type_name)))
      (fn_parameter_list
        (parameter
          (type
            (base_type
              (base_type_name))
            (type_suffix))
          (ident))
        (parameter
          (type
            (base_type
              (base_type_name)))
          (ident)))))
  (alias_declaration
    (const_ident)
    (module_resolution
      (ident))
    (module_resolution
      (ident))
    (const_ident))
  (alias_declaration
    (ident)
    (type
      (base_type
        (type_ident)))
    (ident))
  (alias_declaration
    (ident)
    (type
      (base_type
        (module_type_ident
          (module_resolution
            (ident))
          (type_ident)))
      (type_suffix))
    (ident))
  (alias_declaration
    (at_ident)
    (type
      (base_type
        (type_ident)))
    (at_ident))
  (alias_declaration
    (at_ident)
    (type
      (base_type
        (module_type_ident
          (module_resolution
            (ident))
          (type_ident))))
    (at_ident))
  (alias_declaration
    (at_ident)
    (type
      (base_type
        (generic_type_ident
          (module_type_ident
            (module_resolution
              (ident))
            (type_ident))
          (generic_arguments
            (type
              (base_type
                (base_type_name))))))
      (type_suffix))
    (at_ident))
  (alias_declaration
    (const_ident)
    (module_resolution
      (ident))
    (const_ident)
    (generic_arguments
      (type
        (base_type
          (base_type_name)))))
  (alias_declaration
    (ident)
    (type
      (base_type
        (generic_type_ident
          (module_type_ident
            (module_resolution
              (ident))
            (type_ident))
          (generic_arguments
            (type
              (base_type
                (base_type_name)))))))
    (ident))
  (alias_declaration
    (at_ident)
    (module_resolution
      (ident))
    (at_ident)
    (generic_arguments
      (type
        (base_type
          (base_type_name))))))

================================================================================
Function declarations
================================================================================

fn int? main(int argc, char** argv) {
    int ret = 0;
    return ret;
}

fn int add(int x, int y) @inline {
    return x + y;
}

fn int multiply(int x, int y = 1) {
    return x * y;
}

fn int square_short(int x) => x * x;

fn int short_name(String name) => name == "is_short";

fn int quick(int speed) => speed >= 120;

extern fn void printf(char* str, ...);

extern fn int sum(int... ints);

macro asdf($theta, double[2], $Type = double[2]**?) => $Type.nameof;

--------------------------------------------------------------------------------

(source_file
  (func_definition
    (func_header
      (type
        (base_type
          (base_type_name)))
      (ident))
    (fn_parameter_list
      (parameter
        (type
          (base_type
            (base_type_name)))
        (ident))
      (parameter
        (type
          (base_type
            (base_type_name))
          (type_suffix)
          (type_suffix))
        (ident)))
    (macro_func_body
      (compound_stmt
        (declaration_stmt
          (type
            (base_type
              (base_type_name)))
          (local_decl_after_type
            (ident)
            (integer_literal)))
        (return_stmt
          (ident)))))
  (func_definition
    (func_header
      (type
        (base_type
          (base_type_name)))
      (ident))
    (fn_parameter_list
      (parameter
        (type
          (base_type
            (base_type_name)))
        (ident))
      (parameter
        (type
          (base_type
            (base_type_name)))
        (ident)))
    (attributes
      (attribute
        (at_ident)))
    (macro_func_body
      (compound_stmt
        (return_stmt
          (binary_expr
            (ident)
            (ident))))))
  (func_definition
    (func_header
      (type
        (base_type
          (base_type_name)))
      (ident))
    (fn_parameter_list
      (parameter
        (type
          (base_type
            (base_type_name)))
        (ident))
      (parameter
        (type
          (base_type
            (base_type_name)))
        (ident)
        (parameter_default
          (integer_literal))))
    (macro_func_body
      (compound_stmt
        (return_stmt
          (binary_expr
            (ident)
            (ident))))))
  (func_definition
    (func_header
      (type
        (base_type
          (base_type_name)))
      (ident))
    (fn_parameter_list
      (parameter
        (type
          (base_type
            (base_type_name)))
        (ident)))
    (macro_func_body
      (implies_body
        (binary_expr
          (ident)
          (ident)))))
  (func_definition
    (func_header
      (type
        (base_type
          (base_type_name)))
      (ident))
    (fn_parameter_list
      (parameter
        (type
          (base_type
            (type_ident)))
        (ident)))
    (macro_func_body
      (implies_body
        (binary_expr
          (ident)
          (string_literal
            (string_content))))))
  (func_definition
    (func_header
      (type
        (base_type
          (base_type_name)))
      (ident))
    (fn_parameter_list
      (parameter
        (type
          (base_type
            (base_type_name)))
        (ident)))
    (macro_func_body
      (implies_body
        (binary_expr
          (ident)
          (integer_literal)))))
  (func_declaration
    (func_header
      (type
        (base_type
          (base_type_name)))
      (ident))
    (fn_parameter_list
      (parameter
        (type
          (base_type
            (base_type_name))
          (type_suffix))
        (ident))
      (parameter)))
  (func_declaration
    (func_header
      (type
        (base_type
          (base_type_name)))
      (ident))
    (fn_parameter_list
      (parameter
        (type
          (base_type
            (base_type_name)))
        (ident))))
  (macro_declaration
    (macro_header
      (ident))
    (macro_parameter_list
      (parameter
        (ct_ident))
      (parameter
        (type
          (base_type
            (base_type_name))
          (type_suffix
            (integer_literal))))
      (parameter
        (type
          (base_type
            (ct_type_ident)))
        (parameter_default
          (type
            (base_type
              (base_type_name))
            (type_suffix
              (integer_literal))
            (type_suffix)
            (type_suffix)))))
    (macro_func_body
      (implies_body
        (type_access_expr
          (type
            (base_type
              (ct_type_ident)))
          (access_ident
            (ident)))))))

================================================================================
Struct declarations
================================================================================

struct Person {
    char age;
    char* name;
}

struct Player @packed {
    inline Person p;
    char* name;
    uint health @aligned;
}

fn bool Player.is_alive(Player* p) {
    return p.health > 0;
}

--------------------------------------------------------------------------------

(source_file
  (struct_declaration
    (type_ident)
    (struct_body
      (struct_member_declaration
        (type
          (base_type
            (base_type_name)))
        (identifier_list
          (ident)))
      (struct_member_declaration
        (type
          (base_type
            (base_type_name))
          (type_suffix))
        (identifier_list
          (ident)))))
  (struct_declaration
    (type_ident)
    (attributes
      (attribute
        (at_ident)))
    (struct_body
      (struct_member_declaration
        (type
          (base_type
            (type_ident)))
        (ident))
      (struct_member_declaration
        (type
          (base_type
            (base_type_name))
          (type_suffix))
        (identifier_list
          (ident)))
      (struct_member_declaration
        (type
          (base_type
            (base_type_name)))
        (identifier_list
          (ident))
        (attributes
          (attribute
            (at_ident))))))
  (func_definition
    (func_header
      (type
        (base_type
          (base_type_name)))
      (type
        (base_type
          (type_ident)))
      (ident))
    (fn_parameter_list
      (parameter
        (type
          (base_type
            (type_ident))
          (type_suffix))
        (ident)))
    (macro_func_body
      (compound_stmt
        (return_stmt
          (binary_expr
            (field_expr
              (ident)
              (access_ident
                (ident)))
            (integer_literal)))))))

================================================================================
Bitstruct declarations
================================================================================

bitstruct ShortBE : short @bigendian
{
    short val : 0..15;
}

bitstruct ByteStruct : char
{
    bool start : 0;
    bool center : 1..6;
    bool end : 7;
}

bitstruct Foo : int {
  bool a : foo() @inline;
  bool b : (foo()) @tag("foo", 0);
  int  c : foo() @inline .. foo() @inline + 1;
  int  d : foo() @inline .. (foo()) @tag("foo", 0);
}

--------------------------------------------------------------------------------

(source_file
  (bitstruct_declaration
    (type_ident)
    (type
      (base_type
        (base_type_name)))
    (attributes
      (attribute
        (at_ident)))
    (bitstruct_body
      (bitstruct_member_declaration
        (base_type
          (base_type_name))
        (ident)
        (integer_literal)
        (integer_literal))))
  (bitstruct_declaration
    (type_ident)
    (type
      (base_type
        (base_type_name)))
    (bitstruct_body
      (bitstruct_member_declaration
        (base_type
          (base_type_name))
        (ident)
        (integer_literal))
      (bitstruct_member_declaration
        (base_type
          (base_type_name))
        (ident)
        (integer_literal)
        (integer_literal))
      (bitstruct_member_declaration
        (base_type
          (base_type_name))
        (ident)
        (integer_literal))))
  (bitstruct_declaration
    (type_ident)
    (type
      (base_type
        (base_type_name)))
    (bitstruct_body
      (bitstruct_member_declaration
        (base_type
          (base_type_name))
        (ident)
        (call_expr
          (ident)
          (call_invocation
            (call_inline_attributes
              (at_ident)))))
      (bitstruct_member_declaration
        (base_type
          (base_type_name))
        (ident)
        (paren_expr
          (call_expr
            (ident)
            (call_invocation)))
        (attributes
          (attribute
            (at_ident)
            (attribute_param_list
              (attr_param
                (string_literal
                  (string_content)))
              (attr_param
                (integer_literal))))))
      (bitstruct_member_declaration
        (base_type
          (base_type_name))
        (ident)
        (call_expr
          (ident)
          (call_invocation
            (call_inline_attributes
              (at_ident))))
        (binary_expr
          (call_expr
            (ident)
            (call_invocation
              (call_inline_attributes
                (at_ident))))
          (integer_literal)))
      (bitstruct_member_declaration
        (base_type
          (base_type_name))
        (ident)
        (call_expr
          (ident)
          (call_invocation
            (call_inline_attributes
              (at_ident))))
        (paren_expr
          (call_expr
            (ident)
            (call_invocation)))
        (attributes
          (attribute
            (at_ident)
            (attribute_param_list
              (attr_param
                (string_literal
                  (string_content)))
              (attr_param
                (integer_literal)))))))))

================================================================================
Union declarations
================================================================================

union Set {
    int x;
    float y;
    struct p {
        int z;
        float a;
    }
}

--------------------------------------------------------------------------------

(source_file
  (struct_declaration
    (type_ident)
    (struct_body
      (struct_member_declaration
        (type
          (base_type
            (base_type_name)))
        (identifier_list
          (ident)))
      (struct_member_declaration
        (type
          (base_type
            (base_type_name)))
        (identifier_list
          (ident)))
      (struct_member_declaration
        (ident)
        (struct_body
          (struct_member_declaration
            (type
              (base_type
                (base_type_name)))
            (identifier_list
              (ident)))
          (struct_member_declaration
            (type
              (base_type
                (base_type_name)))
            (identifier_list
              (ident))))))))

================================================================================
Enum declarations
================================================================================

enum OptionTag @packed {
    SOME,
    NONE,
}

enum State : int {
    PENDING,
    RUNNING,
    TERMINATED,
}

enum TokenKind @packed @opaque {
    KEYWORD,
    OPERATOR,
    FUNCTION,
}

enum Abc : inline int
{
  ABC,
  DEF,
}

enum Foo : int (inline String name, int y, int z)
{
  ABC = { "Hello", 1, 2 },
  DEF = { "World", 2, 3 },
}

--------------------------------------------------------------------------------

(source_file
  (enum_declaration
    (type_ident)
    (attributes
      (attribute
        (at_ident)))
    (enum_body
      (enum_constant
        (const_ident))
      (enum_constant
        (const_ident))))
  (enum_declaration
    (type_ident)
    (enum_spec
      (type
        (base_type
          (base_type_name))))
    (enum_body
      (enum_constant
        (const_ident))
      (enum_constant
        (const_ident))
      (enum_constant
        (const_ident))))
  (enum_declaration
    (type_ident)
    (attributes
      (attribute
        (at_ident))
      (attribute
        (at_ident)))
    (enum_body
      (enum_constant
        (const_ident))
      (enum_constant
        (const_ident))
      (enum_constant
        (const_ident))))
  (enum_declaration
    (type_ident)
    (enum_spec
      (type
        (base_type
          (base_type_name))))
    (enum_body
      (enum_constant
        (const_ident))
      (enum_constant
        (const_ident))))
  (enum_declaration
    (type_ident)
    (enum_spec
      (type
        (base_type
          (base_type_name)))
      (enum_param_list
        (enum_param_declaration
          (type
            (base_type
              (type_ident)))
          (ident))
        (enum_param_declaration
          (type
            (base_type
              (base_type_name)))
          (ident))
        (enum_param_declaration
          (type
            (base_type
              (base_type_name)))
          (ident))))
    (enum_body
      (enum_constant
        (const_ident)
        (enum_arg
          (initializer_list
            (arg
              (string_literal
                (string_content)))
            (arg
              (integer_literal))
            (arg
              (integer_literal)))))
      (enum_constant
        (const_ident)
        (enum_arg
          (initializer_list
            (arg
              (string_literal
                (string_content)))
            (arg
              (integer_literal))
            (arg
              (integer_literal))))))))

================================================================================
Error declarations
================================================================================

faultdef FILE_NOT_FOUND, FILE_NOT_READABLE;

--------------------------------------------------------------------------------

(source_file
  (faultdef_declaration
    (const_ident)
    (const_ident)))

================================================================================
Byte literals
================================================================================

char[*] foo = x"       00
aa  bbcc   ddee  ff";
char[*] foo = x'd  ead b
eef';
char[*] foo = x`ff 00 aa 00`;
char[*] foo = b64"   SG  VsbG8gV29ybGQ=";
char[*] foo = b64'   SG  VsbG8gV29ybGQ=';
char[*] foo = b64`   SG  VsbG8g

V29ybGQ=`;

--------------------------------------------------------------------------------

(source_file
  (global_declaration
    (type
      (base_type
        (base_type_name))
      (type_suffix))
    (ident)
    (bytes_expr
      (bytes_literal)))
  (global_declaration
    (type
      (base_type
        (base_type_name))
      (type_suffix))
    (ident)
    (bytes_expr
      (bytes_literal)))
  (global_declaration
    (type
      (base_type
        (base_type_name))
      (type_suffix))
    (ident)
    (bytes_expr
      (bytes_literal)))
  (global_declaration
    (type
      (base_type
        (base_type_name))
      (type_suffix))
    (ident)
    (bytes_expr
      (bytes_literal)))
  (global_declaration
    (type
      (base_type
        (base_type_name))
      (type_suffix))
    (ident)
    (bytes_expr
      (bytes_literal)))
  (global_declaration
    (type
      (base_type
        (base_type_name))
      (type_suffix))
    (ident)
    (bytes_expr
      (bytes_literal))))
